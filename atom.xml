<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Weizhenwei's Technical Blog]]></title>
  <link href="http://weizhenwei.github.io/atom.xml" rel="self"/>
  <link href="http://weizhenwei.github.io/"/>
  <updated>2014-12-10T23:38:01+08:00</updated>
  <id>http://weizhenwei.github.io/</id>
  <author>
    <name><![CDATA[Weizhenwei]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Linux 系统调用实现-以read为例]]></title>
    <link href="http://weizhenwei.github.io/blog/2014/12/08/linux-xi-tong-diao-yong-shi-xian-yi-sys-readwei-li/"/>
    <updated>2014-12-08T21:52:21+08:00</updated>
    <id>http://weizhenwei.github.io/blog/2014/12/08/linux-xi-tong-diao-yong-shi-xian-yi-sys-readwei-li</id>
    <content type="html"><![CDATA[<p>&emsp;&emsp;Linux系统调用是连接用户态和内核态的纽带，弄清楚这个过程对于理解Linux操作系统具有十分重要的意义。下面以read系统调用为例分析这一过程。本文中Linux内核代码版本为3.16，glibc版本为2.20。</p>

<h3>1. sys_read系统调用的定义(在内核文件fs/read_write.c中):</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">SYSCALL_DEFINE3</span><span class="p">(</span><span class="n">read</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">int</span><span class="p">,</span> <span class="n">fd</span><span class="p">,</span> <span class="kt">char</span> <span class="n">__user</span> <span class="o">*</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="kt">size_t</span><span class="p">,</span> <span class="n">count</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">fd</span> <span class="n">f</span> <span class="o">=</span> <span class="n">fdget_pos</span><span class="p">(</span><span class="n">fd</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">ssize_t</span> <span class="n">ret</span> <span class="o">=</span> <span class="o">-</span><span class="n">EBADF</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">f</span><span class="p">.</span><span class="n">file</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kt">loff_t</span> <span class="n">pos</span> <span class="o">=</span> <span class="n">file_pos_read</span><span class="p">(</span><span class="n">f</span><span class="p">.</span><span class="n">file</span><span class="p">);</span>
</span><span class='line'>        <span class="n">ret</span> <span class="o">=</span> <span class="n">vfs_read</span><span class="p">(</span><span class="n">f</span><span class="p">.</span><span class="n">file</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="n">count</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">pos</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">ret</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>            <span class="n">file_pos_write</span><span class="p">(</span><span class="n">f</span><span class="p">.</span><span class="n">file</span><span class="p">,</span> <span class="n">pos</span><span class="p">);</span>
</span><span class='line'>        <span class="n">fdput_pos</span><span class="p">(</span><span class="n">f</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">ret</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>&emsp;&emsp;sys_read的实现代码比较简单：首先根据文件描述符fd通过fdget_pos(fd)从当前进程结构中得到fd对应的struct fd结构（这个fd结构是struct file结构的进一步封装）；然后调用file_pos_read(f.file)得到当前文件读位置；最后调用vsf_read()进行文件读取操作；如果读取成功，则调用file_pos_write函数更新文件的读当前位置；最后调用fdput_pos函数更新文件的引用计数；最终sys_read返回读取的字节数。<br/>
&emsp;&emsp;sys_read系统调用实现的核心是vfs_read函数，这涉及到Linux的VFS虚拟文件系统机制，这是另外一个主题，在此就不深入展开了。</p>

<h3>2. SYSCALL_DEFINEx宏的定义</h3>

<p>&emsp;&emsp;SYSCALL_DEFINEx宏是理解Linux内核系统调用定义的关键，该宏在include/linux/syscalls.h中定义：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#define SYSCALL_DEFINE1(name, ...) SYSCALL_DEFINEx(1, _##name, __VA_ARGS__)  </span>
</span><span class='line'><span class="cp">#define SYSCALL_DEFINE2(name, ...) SYSCALL_DEFINEx(2, _##name, __VA_ARGS__)  </span>
</span><span class='line'><span class="cp">#define SYSCALL_DEFINE3(name, ...) SYSCALL_DEFINEx(3, _##name, __VA_ARGS__)  </span>
</span><span class='line'><span class="cp">#define SYSCALL_DEFINE4(name, ...) SYSCALL_DEFINEx(4, _##name, __VA_ARGS__)  </span>
</span><span class='line'><span class="cp">#define SYSCALL_DEFINE5(name, ...) SYSCALL_DEFINEx(5, _##name, __VA_ARGS__)  </span>
</span><span class='line'><span class="cp">#define SYSCALL_DEFINE6(name, ...) SYSCALL_DEFINEx(6, _##name, __VA_ARGS__)  </span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define SYSCALL_DEFINEx(x, sname, ...)          \  </span>
</span><span class='line'><span class="n">SYSCALL_METADATA</span><span class="p">(</span><span class="n">sname</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">__VA_ARGS__</span><span class="p">)</span>         <span class="err">\</span>
</span><span class='line'><span class="n">__SYSCALL_DEFINEx</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">sname</span><span class="p">,</span> <span class="n">__VA_ARGS__</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define __SYSCALL_DEFINEx(x, name, ...)                     \  </span>
</span><span class='line'><span class="n">asmlinkage</span> <span class="kt">long</span> <span class="n">sys</span><span class="err">##</span><span class="n">name</span><span class="p">(</span><span class="n">__MAP</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">__SC_DECL</span><span class="p">,</span><span class="n">__VA_ARGS__</span><span class="p">))</span>   <span class="err">\</span>
</span><span class='line'>    <span class="n">__attribute__</span><span class="p">((</span><span class="n">alias</span><span class="p">(</span><span class="n">__stringify</span><span class="p">(</span><span class="n">SyS</span><span class="err">##</span><span class="n">name</span><span class="p">))));</span>         <span class="err">\</span>
</span></code></pre></td></tr></table></div></figure>


<p>&emsp;&emsp;其中SYSCALL_METADATA是和CONFIG_FTRACE_SYSCALLS相关的一个宏定义；关键字asmlinkage告诉编译器函数的参数从栈上获得，所有系统调用都采取这种参数传递方式；##用在宏中表示字符串链接。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Add Category to Octopress]]></title>
    <link href="http://weizhenwei.github.io/blog/2014/12/07/add-category-to-octopress/"/>
    <updated>2014-12-07T23:05:39+08:00</updated>
    <id>http://weizhenwei.github.io/blog/2014/12/07/add-category-to-octopress</id>
    <content type="html"><![CDATA[<h5>1. 新建插件文件plugins/category_list_tag.rb, 内容如下:</h5>

<pre><code>module Jekyll  
  class CategoryListTag &lt; Liquid::Tag  
    def render(context)  
      html = ""  
      categories = context.registers[:site].categories.keys  
      categories.sort.each do |category|  
        posts_in_category = context.registers[:site].categories[category].size  
        category_dir = context.registers[:site].config['category_dir']  
        category_url = File.join(category_dir, category.gsub(/_|\P{Word}/, '-').gsub(/-{2,}/, '-').downcase)  
        html &lt;&lt; "&lt;li class='category'&gt;&lt;a href='http://weizhenwei.github.io/#{category_url}/'&gt;#{category} (#{posts_in_category})&lt;/a&gt;&lt;/li&gt;\n"  
      end  
      html  
    end  
  end  
end  

Liquid::Template.register_tag('category_list', Jekyll::CategoryListTag)  
</code></pre>

<h5>2. 新建source/_includes/asides/category_list.html文件，内容如下：</h5>

<pre><code>&lt;section&gt;  
  &lt;h1&gt;Categories&lt;/h1&gt;  
  &lt;ul id="categories"&gt;  
    { % category_list % }  
  &lt;/ul&gt;  
&lt;/section&gt;  
</code></pre>

<h5>3. 修改_config.yml文件，在default_asides项中添加asides/category_list.html, 值之间以逗号隔开:</h5>

<pre><code>default_asides:[asides/category_list.html, asides/recent_posts.html, ...]  
</code></pre>

<h5>4. rake generate; rake preview; rake deploy;</h5>

<hr />

<h5>参考资料：</h5>

<p><a href="http://www.cnblogs.com/oec2003/archive/2013/05/31/3109577.html">http://www.cnblogs.com/oec2003/archive/2013/05/31/3109577.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress Setup and Deploy on Github]]></title>
    <link href="http://weizhenwei.github.io/blog/2014/12/01/octopress-setup-and-deploy-on-github/"/>
    <updated>2014-12-01T22:49:57+08:00</updated>
    <id>http://weizhenwei.github.io/blog/2014/12/01/octopress-setup-and-deploy-on-github</id>
    <content type="html"><![CDATA[<p>经过充分调研，选定Octopress作为技术博客系统框架。
下面是在Linux mint 13操作系统上安装Octopress和在Github上部署的过程。</p>

<h2>安装</h2>

<h3>1.安装git, ruby和nodejs</h3>

<pre><code>apt-get install git
apt-get install libruby1.9.1
apt-get install ruby1.9.1
apt-get install ruby1.9.1-dev
apt-get install nodejs
</code></pre>

<h3>2.下载Octopress</h3>

<pre><code>git clone git://github.com/imathis/octopress.git octopress
cd octopress
</code></pre>

<h3>3.安装依赖</h3>

<pre><code>gem install bundler
rbenv rehash
bundle install
</code></pre>

<h3>4.安装默认Octopress主题</h3>

<pre><code>rake install
</code></pre>

<h2>在Github上部署Octopress</h2>

<h3>1.在Github个人帐号上创建仓库</h3>

<p>我的Github个人帐号为weizhenwei，创建仓库weizhenwei.github.io.git</p>

<h3>2.部署Octopress到Github</h3>

<pre><code>1.rake setup_github_pages    #关联仓库weizhenwei.github.io.git的完整路径；
2.rake generate              #内容生成；
3.rake preview               #内容预览，在本地浏览器localhost:4000预览；
4.rake deploy                #内容部署，上传到github仓库上的master分支；
</code></pre>

<h3>3.Octopress源代码保存</h3>

<pre><code>git add .
git commit -m "my comment"
git push origin source       # 源代码保存到source分支；
</code></pre>

<h3>4.Octopress配置</h3>

<p>主要是修改_config.yml文件。</p>

<h2>博客内容撰写：</h2>

<pre><code>rake new_post["title“]       # 创建博客文件，该文件在sorce/_post目录下；
然后编辑这个博客文件；
rake generate;
rake preview;
rake deploy;
git add .
git commit -m "my comment"
git push origin source
</code></pre>

<h2>添加新页面：</h2>

<pre><code>1. rake new_page["aboutme"], 该命令自动生成source/aboutme目录以及其下的index.markdown文件;  
2. 编辑source/aboutme/index.markdown文件, 添加内容;  
3. 修改souce/_includes/custom/navigation.html文件，将1.中新建文件路径添加到该文件中。
4. rake generate; rake preview; rake deploy;  
5. git add .; git commit -m "comment"; git push origin source;  
</code></pre>

<h2>注意事项：</h2>

<pre><code>1.在新的地方git clone代码之后，需要checkout到source分支，
  然后再运行rake setup_github_pages命令连接上仓库url。
2. master分支是内容分支，全部是由rake deploy命令提交；
   source分支是源代码分支，用git命令进行提交；
   两个分支不可搞混。
</code></pre>

<hr />

<h2>参考文献：</h2>

<p><a href="http://octopress.org/docs/setup/">http://octopress.org/docs/setup/</a><br/>
<a href="http://octopress.org/docs/deploying/github/">http://octopress.org/docs/deploying/github/</a><br/>
<a href="http://octopress.org/docs/blogging/">http://octopress.org/docs/blogging/</a><br/>
<a href="http://stackoverflow.com/questions/21356212/failed-to-deploy-to-github-pages-using-octopress">http://stackoverflow.com/questions/21356212/failed-to-deploy-to-github-pages-using-octopress</a></p>
]]></content>
  </entry>
  
</feed>
