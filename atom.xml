<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Weizhenwei's Technical Blog]]></title>
  <link href="http://weizhenwei.github.io/atom.xml" rel="self"/>
  <link href="http://weizhenwei.github.io/"/>
  <updated>2015-09-22T23:35:28+08:00</updated>
  <id>http://weizhenwei.github.io/</id>
  <author>
    <name><![CDATA[Weizhenwei]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[On Recursion and Iteration in Algorithm]]></title>
    <link href="http://weizhenwei.github.io/blog/2015/09/22/on-recursion-and-iteration-in-algorithm/"/>
    <updated>2015-09-22T22:59:40+08:00</updated>
    <id>http://weizhenwei.github.io/blog/2015/09/22/on-recursion-and-iteration-in-algorithm</id>
    <content type="html"><![CDATA[<p>&emsp;&emsp;本文是刷leetcode的一点心得。</p>

<h3>1 算法设计领域的迭代和递归</h3>

<p>&emsp;&emsp;在计算机程序设计或者算法设计领域，迭代和递归在本质上是一致的：
每次递归或迭代是为了解决原问题的子问题，然后根据子问题的结果和当前问题的状态
综合求解当前问题。所不同的是：在递归方法中，先求得子问题的解，然后接合当前
状态求得问题结果。而在迭代方法中，使用栈保存当前问题的求解状态，然后把当前问题
分解为子问题，并把当前状态和子问题入栈；接下来对栈中的元素迭代求解，并记录最终
结果的中间状态，直到栈为空，此时返回最终的求解结果。<br/>
&emsp;&emsp;对于很多问题，用递归的方法很容易就容易解决，而用迭代的方法则不那么
直观，甚至感觉难以下手。这是因为在递归方法中，保存中间结果和栈的操作都交由函数
调用去实现了，而在迭代方法中，这些都需要在算法中手动处理。不过，只要能认识到递归
和函数其实是一样的，那么就可以很自信的说：能用递归解决的问题就一定能用迭代解决。<br/>
&emsp;&emsp;下面以一些leetcode中的题目为例进行分析。</p>

<h3>2 例题</h3>

<p>&emsp;&emsp;<a href="https://leetcode.com/problems/invert-binary-tree/">Invert Binary Tree</a><br/>
Recursive Version:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">TreeNode</span><span class="o">*</span> <span class="nf">invertTreeRecursive</span><span class="p">(</span><span class="n">TreeNode</span><span class="o">*</span> <span class="n">root</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">root</span> <span class="o">==</span> <span class="nb">NULL</span> <span class="o">||</span> <span class="p">(</span><span class="n">root</span><span class="o">-&gt;</span><span class="n">left</span> <span class="o">==</span> <span class="nb">NULL</span> <span class="o">&amp;&amp;</span> <span class="n">root</span><span class="o">-&gt;</span><span class="n">right</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">root</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">root</span><span class="o">-&gt;</span><span class="n">left</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">root</span><span class="o">-&gt;</span><span class="n">left</span> <span class="o">=</span> <span class="n">invertTreeRecursive</span><span class="p">(</span><span class="n">root</span><span class="o">-&gt;</span><span class="n">left</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">root</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">root</span><span class="o">-&gt;</span><span class="n">right</span> <span class="o">=</span> <span class="n">invertTreeRecursive</span><span class="p">(</span><span class="n">root</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">TreeNode</span> <span class="o">*</span><span class="n">tmpNode</span> <span class="o">=</span> <span class="n">root</span><span class="o">-&gt;</span><span class="n">left</span><span class="p">;</span>
</span><span class='line'>    <span class="n">root</span><span class="o">-&gt;</span><span class="n">left</span> <span class="o">=</span> <span class="n">root</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">;</span>
</span><span class='line'>    <span class="n">root</span><span class="o">-&gt;</span><span class="n">right</span> <span class="o">=</span> <span class="n">tmpNode</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">root</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>Iterative Version:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">TreeNode</span><span class="o">*</span> <span class="nf">invertTreeIterative</span><span class="p">(</span><span class="n">TreeNode</span><span class="o">*</span> <span class="n">root</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">root</span> <span class="o">==</span> <span class="nb">NULL</span> <span class="o">||</span> <span class="p">(</span><span class="n">root</span><span class="o">-&gt;</span><span class="n">left</span> <span class="o">==</span> <span class="nb">NULL</span> <span class="o">&amp;&amp;</span> <span class="n">root</span><span class="o">-&gt;</span><span class="n">right</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">root</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">stack</span><span class="o">&lt;</span><span class="n">TreeNode</span><span class="o">*&gt;</span> <span class="n">theStack</span><span class="p">;</span>
</span><span class='line'>    <span class="n">theStack</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">root</span><span class="p">);</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">theStack</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">TreeNode</span> <span class="o">*</span><span class="n">topNode</span> <span class="o">=</span> <span class="n">theStack</span><span class="p">.</span><span class="n">top</span><span class="p">();</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">topNode</span><span class="o">-&gt;</span><span class="n">left</span> <span class="o">==</span> <span class="nb">NULL</span> <span class="o">&amp;&amp;</span> <span class="n">topNode</span><span class="o">-&gt;</span><span class="n">right</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">theStack</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">TreeNode</span> <span class="o">*</span><span class="n">tmpNode</span> <span class="o">=</span> <span class="n">topNode</span><span class="o">-&gt;</span><span class="n">left</span><span class="p">;</span>
</span><span class='line'>            <span class="n">topNode</span><span class="o">-&gt;</span><span class="n">left</span> <span class="o">=</span> <span class="n">topNode</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">;</span>
</span><span class='line'>            <span class="n">topNode</span><span class="o">-&gt;</span><span class="n">right</span> <span class="o">=</span> <span class="n">tmpNode</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">theStack</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">topNode</span><span class="o">-&gt;</span><span class="n">left</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">theStack</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">topNode</span><span class="o">-&gt;</span><span class="n">left</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">topNode</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">theStack</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">topNode</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>  <span class="c1">// while  </span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">root</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>3 结论</h3>

<p>&emsp;&emsp;能用递归解决的问题，就一定能用迭代解决。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[x86-64指令和ABI]]></title>
    <link href="http://weizhenwei.github.io/blog/2014/12/25/x86-64zhi-ling-he-abi/"/>
    <updated>2014-12-25T21:51:09+08:00</updated>
    <id>http://weizhenwei.github.io/blog/2014/12/25/x86-64zhi-ling-he-abi</id>
    <content type="html"><![CDATA[<p>&emsp;&emsp;本文是针对x86-64指令和ABI的综述，其内容翻译自参考文献[1]。</p>

<h3>1 引言</h3>

<p>x86-64指令一般有两个操作数：源操作数和目的操作数，目的操作数也即指令执行结果。<br/>
linux下的x86-64指令格式采用AT&amp;T格式，也即源操作数在左边，目的操作数在右边。<br/>
绝大多数x86-64指令采用后缀字母标示操作数的大小，例如q表示64为，b表示8位，w表示16位，l表示32位。</p>

<h3>2 寄存器</h3>

<p>x86-64有16个64位通用寄存器，在AT&amp;T格式中使用%做前缀，其定义和在ABI中的角色如下表所示：</p>

<table>
<thead>
<tr>
<th style="text-align:center;"> Register      </th>
<th style="text-align:center;"> Callee Save   </th>
<th style="text-align:left;">                 Description                 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> %rax          </td>
<td style="text-align:center;"> no            </td>
<td style="text-align:left;"> result register, also used in idiv and imul </td>
</tr>
<tr>
<td style="text-align:center;"> %rbx          </td>
<td style="text-align:center;"> yes           </td>
<td style="text-align:left;"> miscellaneous register                      </td>
</tr>
<tr>
<td style="text-align:center;"> %rcx          </td>
<td style="text-align:center;"> no            </td>
<td style="text-align:left;"> fourth argument register                    </td>
</tr>
<tr>
<td style="text-align:center;"> %rdx          </td>
<td style="text-align:center;"> no            </td>
<td style="text-align:left;"> third argument register, also idiv and imul </td>
</tr>
<tr>
<td style="text-align:center;"> %rsp          </td>
<td style="text-align:center;"> no            </td>
<td style="text-align:left;"> stack pointer                               </td>
</tr>
<tr>
<td style="text-align:center;"> %rbp          </td>
<td style="text-align:center;"> yes           </td>
<td style="text-align:left;"> frame pointer                               </td>
</tr>
<tr>
<td style="text-align:center;"> %rsi          </td>
<td style="text-align:center;"> no            </td>
<td style="text-align:left;"> second argument register                    </td>
</tr>
<tr>
<td style="text-align:center;"> %rdi          </td>
<td style="text-align:center;"> no            </td>
<td style="text-align:left;"> first argument register                     </td>
</tr>
<tr>
<td style="text-align:center;"> %r8           </td>
<td style="text-align:center;"> no            </td>
<td style="text-align:left;"> fifth argument register                     </td>
</tr>
<tr>
<td style="text-align:center;"> %r9           </td>
<td style="text-align:center;"> no            </td>
<td style="text-align:left;"> sixth argument register                     </td>
</tr>
<tr>
<td style="text-align:center;"> %r10          </td>
<td style="text-align:center;"> no            </td>
<td style="text-align:left;"> miscellaneous register                      </td>
</tr>
<tr>
<td style="text-align:center;"> %r11          </td>
<td style="text-align:center;"> no            </td>
<td style="text-align:left;"> miscellaneous register                      </td>
</tr>
<tr>
<td style="text-align:center;"> %r12~%15      </td>
<td style="text-align:center;"> yes           </td>
<td style="text-align:left;"> miscellaneous registers                     </td>
</tr>
</tbody>
</table>


<p>寄存器%rbp，%rbx和%r12~%r15是callee-save的，也即由被调用函数保存。</p>

<h3>3 函数调用约定</h3>

<p>Mac OS Ｘ和Ｌinux操作系统的函数调用都遵从System V ABI，<br/>
有三个x86-64指令用来实现函数调用和返回：<br/>
&emsp;&emsp;&ensp;call:返回地址(当前下一条指令地址)压栈，控制权转移到操作数所在的地址；<br/>
&emsp;&emsp;leave:设置栈指针%rsp为为帧%rbp，恢复帧指针%rbp为栈上保存的帧指针，<br/>
&emsp;&emsp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;该指针从函数栈上弹出；<br/>
&emsp;&emsp;&ensp;&ensp;ret:返回值从函数栈弹出，并跳转到该地址；</p>

<h4>3.1 函数参数</h4>

<p>函数调用的前6个参数通过寄存器传递，传递顺序为%rdi,%rsi,%rdx,%rcx,%r8,%r9。超出部分的参数通过函数
栈帧传递。%rax用作第一个函数返回值，%rdx用作第二个函数返回值。</p>

<h4>3.2 函数栈帧</h4>

<p>函数栈帧从高地址往低地址方向增长，System V ABI使用两个寄存器访问函数栈帧：帧指针%rbp和栈指针%rsp。
帧指针%rbp指向当前函数栈帧基址(栈底)，栈指针%rsp指向当前函数栈帧栈顶。<br/>
一般说来，帧指针%rbp用来存取函数栈帧上的数据，例如传递进来的函数参数，或者函数的本地局部变量。
System V ABI要求要求函数栈帧16字节对齐，这要求函数栈帧的大小应该是16的倍数。<br/>
函数栈帧结构图如下所示：</p>

<p align="center">
  <img src="http://weizhenwei.github.io/images/2014-12-25-x86-64zhi-ling-he-abi-stack-frame.png" alt="stack-frame"/>
</p>


<h4>3.3 函数调用协议</h4>

<p>函数调用协议分为caller端和callee端，每端各有两个重要步骤：<br/>
1）caller端首先保存caller-save寄存器到到函数栈上，并根据ABI加载函数参数到规定的寄存器和函数栈位置，然后执行call指令；<br/>
2）call指令使得程序控制转向callee函数，该函数首先需要执行链接和初始化任务，这些任务由以下指令序列完成：<br/>
&ensp;&ensp;&ensp;&ensp;pushq %rbp;<br/>
&ensp;&ensp;&ensp;&ensp;movq %rsp, %rbp;<br/>
&ensp;&ensp;&ensp;&ensp;subq $N, %rbp;<br/>
pushq指令用来保存帧指针，movq指令初始化帧指针为当前栈指针，subq指令为callee函数分配栈空间；对于callee-save的那些寄存器，如果在函数体中用到这些寄存器，那么接下来需要通过一系列pushq指令保存这些callee-save寄存器到函数栈帧上。程序接下来执行函数体部分代码。<br/>
3）函数体部分执行完以后，将执行callee返回部分：首先将函数返回值置入%rax中；然后释放函数栈帧空间，并恢复%rsp，%rbp寄存器；最后调用leave/ret指令返回到caller部分。<br/>
4）在caller端，如果它为callee的函数参数分配了存储空间，则在此时需要释放这些空间。<br/>
至此，一个完整的函数调用过程完成。</p>

<h3>4 指令</h3>

<p>关于指令部分，内容实在太多，具体请参考x86-64的指令手册。此处仅仅略述操作数。
x86-64指令的操作数有三种：寄存器(以%为前缀)，立即数(以$为前缀)和内存地址。内存地址的寻址方式概述如下：</p>

<table>
<thead>
<tr>
<th style="text-align:center;"> Syntax          </th>
<th style="text-align:center;"> Address       </th>
<th style="text-align:left;">                 Description                    </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> (reg)           </td>
<td style="text-align:center;"> reg           </td>
<td style="text-align:left;"> Base addressing                                </td>
</tr>
<tr>
<td style="text-align:center;"> d(reg)          </td>
<td style="text-align:center;"> reg+d         </td>
<td style="text-align:left;"> Base plus displacement addressing              </td>
</tr>
<tr>
<td style="text-align:center;"> d(reg, s)       </td>
<td style="text-align:center;"> s*reg+d       </td>
<td style="text-align:left;"> Scaled index plus displacement, s in {2, 4, 8} </td>
</tr>
<tr>
<td style="text-align:center;"> d(reg1, reg2, s)</td>
<td style="text-align:center;"> reg1+s*reg2+d </td>
<td style="text-align:left;"> Base plus scaled index plus displacement       </td>
</tr>
</tbody>
</table>


<h5>参考文献</h5>

<p><a href="http://www.classes.cs.uchicago.edu/archive/2009/spring/22620-1/docs/handout-03.pdf">http://www.classes.cs.uchicago.edu/archive/2009/spring/22620-1/docs/handout-03.pdf</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu安装WineQQ]]></title>
    <link href="http://weizhenwei.github.io/blog/2014/12/15/ubuntuan-zhuang-wineqq/"/>
    <updated>2014-12-15T21:13:03+08:00</updated>
    <id>http://weizhenwei.github.io/blog/2014/12/15/ubuntuan-zhuang-wineqq</id>
    <content type="html"><![CDATA[<p>&emsp;&emsp;如果以Ubuntu(或者其变种Mint)作为日常工作环境的话，那么类似于字处理，挂QQ等将成为不可避免的需求。关于在Ubuntu上挂QQ，之前的解决方案是使用VirtualBox安装windows,然后在windows里安装QQ；最近也使用Qemu安装过Win7。很明显为挂个QQ而安装虚拟机太笨重，非常耗费系统资源。最近经过调研发现一种新解决办法，即WineQQ。亲测好用，记录之。</p>

<h3>1. 安装依赖库</h3>

<pre><code>sudo apt-get install libgtk2.0-0  
sudo apt-get install ia32-libs  
sudo apt-get install lib32ncurses5  
sudo apt-get install liblcms2-2  
</code></pre>

<h3>2. 下载并解压缩wineqq</h3>

<p>&emsp;&emsp;下载地址：<a href="http://www.ubuntukylin.com/applications/showimg.php?lang=cn&amp;id=23">http://www.ubuntukylin.com/applications/showimg.php?lang=cn&amp;id=23</a><br/>
&emsp;&emsp;然后用unzip命令解压缩，得到三个deb文件，安装之。</p>

<h3>3. 安装wineqq</h3>

<pre><code>sudo dpkg -i wine-qqintl_0.1.3-2_i386.deb  
sudo dpkg -i ttf-wqy-microhei_0.2.0-beta-2_all.deb  
sudo dpkg -i fonts-wqy-microhei_0.2.0-beta-2_all.deb  
</code></pre>

<p>&emsp;&emsp;然后在系统菜单的互联网子菜单里就可以发现刚安装的WineQQ，开启用之！</p>

<h3>参考文献</h3>

<p><a href="http://bubuko.com/infodetail-343048.html">http://bubuko.com/infodetail-343048.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux 系统调用实现-以read为例]]></title>
    <link href="http://weizhenwei.github.io/blog/2014/12/08/linux-xi-tong-diao-yong-shi-xian-yi-sys-readwei-li/"/>
    <updated>2014-12-08T21:52:21+08:00</updated>
    <id>http://weizhenwei.github.io/blog/2014/12/08/linux-xi-tong-diao-yong-shi-xian-yi-sys-readwei-li</id>
    <content type="html"><![CDATA[<p>&emsp;&emsp;Linux系统调用是连接用户态和内核态的纽带，弄清楚这个过程对于理解Linux操作系统具有十分重要的意义。下面以read系统调用为例分析这一过程。本文中Linux内核代码版本为3.16，glibc版本为2.20。</p>

<h3>1. sys_read系统调用的定义(在内核文件fs/read_write.c中):</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">SYSCALL_DEFINE3</span><span class="p">(</span><span class="n">read</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">int</span><span class="p">,</span> <span class="n">fd</span><span class="p">,</span> <span class="kt">char</span> <span class="n">__user</span> <span class="o">*</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="kt">size_t</span><span class="p">,</span> <span class="n">count</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">fd</span> <span class="n">f</span> <span class="o">=</span> <span class="n">fdget_pos</span><span class="p">(</span><span class="n">fd</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">ssize_t</span> <span class="n">ret</span> <span class="o">=</span> <span class="o">-</span><span class="n">EBADF</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">f</span><span class="p">.</span><span class="n">file</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kt">loff_t</span> <span class="n">pos</span> <span class="o">=</span> <span class="n">file_pos_read</span><span class="p">(</span><span class="n">f</span><span class="p">.</span><span class="n">file</span><span class="p">);</span>
</span><span class='line'>        <span class="n">ret</span> <span class="o">=</span> <span class="n">vfs_read</span><span class="p">(</span><span class="n">f</span><span class="p">.</span><span class="n">file</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="n">count</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">pos</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">ret</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>            <span class="n">file_pos_write</span><span class="p">(</span><span class="n">f</span><span class="p">.</span><span class="n">file</span><span class="p">,</span> <span class="n">pos</span><span class="p">);</span>
</span><span class='line'>        <span class="n">fdput_pos</span><span class="p">(</span><span class="n">f</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">ret</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>&emsp;&emsp;sys_read的实现代码比较简单：首先根据文件描述符fd通过fdget_pos(fd)从当前进程结构中得到fd对应的struct fd结构（这个fd结构是struct file结构的进一步封装）；然后调用file_pos_read(f.file)得到当前文件读位置；最后调用vsf_read()进行文件读取操作；如果读取成功，则调用file_pos_write函数更新文件的读当前位置；最后调用fdput_pos函数更新文件的引用计数；最终sys_read返回读取的字节数。<br/>
&emsp;&emsp;sys_read系统调用实现的核心是vfs_read函数，这涉及到Linux的VFS虚拟文件系统机制，这是另外一个主题，在此就不深入展开了。</p>

<h3>2. SYSCALL_DEFINEx宏的定义</h3>

<p>&emsp;&emsp;SYSCALL_DEFINEx宏是理解Linux内核系统调用定义的关键，该宏在include/linux/syscalls.h中定义：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#define SYSCALL_DEFINE1(name, ...) SYSCALL_DEFINEx(1, _##name, __VA_ARGS__)  </span>
</span><span class='line'><span class="cp">#define SYSCALL_DEFINE2(name, ...) SYSCALL_DEFINEx(2, _##name, __VA_ARGS__)  </span>
</span><span class='line'><span class="cp">#define SYSCALL_DEFINE3(name, ...) SYSCALL_DEFINEx(3, _##name, __VA_ARGS__)  </span>
</span><span class='line'><span class="cp">#define SYSCALL_DEFINE4(name, ...) SYSCALL_DEFINEx(4, _##name, __VA_ARGS__)  </span>
</span><span class='line'><span class="cp">#define SYSCALL_DEFINE5(name, ...) SYSCALL_DEFINEx(5, _##name, __VA_ARGS__)  </span>
</span><span class='line'><span class="cp">#define SYSCALL_DEFINE6(name, ...) SYSCALL_DEFINEx(6, _##name, __VA_ARGS__)  </span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define SYSCALL_DEFINEx(x, sname, ...)          \  </span>
</span><span class='line'><span class="n">SYSCALL_METADATA</span><span class="p">(</span><span class="n">sname</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">__VA_ARGS__</span><span class="p">)</span>         <span class="err">\</span>
</span><span class='line'><span class="n">__SYSCALL_DEFINEx</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">sname</span><span class="p">,</span> <span class="n">__VA_ARGS__</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define __SYSCALL_DEFINEx(x, name, ...)                     \  </span>
</span><span class='line'><span class="n">asmlinkage</span> <span class="kt">long</span> <span class="n">sys</span><span class="err">##</span><span class="n">name</span><span class="p">(</span><span class="n">__MAP</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">__SC_DECL</span><span class="p">,</span><span class="n">__VA_ARGS__</span><span class="p">))</span>   <span class="err">\</span>
</span><span class='line'>    <span class="n">__attribute__</span><span class="p">((</span><span class="n">alias</span><span class="p">(</span><span class="n">__stringify</span><span class="p">(</span><span class="n">SyS</span><span class="err">##</span><span class="n">name</span><span class="p">))));</span>         <span class="err">\</span>
</span></code></pre></td></tr></table></div></figure>


<p>&emsp;&emsp;其中SYSCALL_METADATA是和CONFIG_FTRACE_SYSCALLS相关的一个宏定义；关键字asmlinkage告诉编译器函数的参数从栈上获得，所有系统调用都采取这种参数传递方式；##用在宏中表示字符串链接。__stringify表示字符串化，也即:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#define __stringify_1(x...) #x  </span>
</span><span class='line'><span class="cp">#define __stringify(x...)   __stringify_1(x)  </span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Add Category to Octopress]]></title>
    <link href="http://weizhenwei.github.io/blog/2014/12/07/add-category-to-octopress/"/>
    <updated>2014-12-07T23:05:39+08:00</updated>
    <id>http://weizhenwei.github.io/blog/2014/12/07/add-category-to-octopress</id>
    <content type="html"><![CDATA[<h5>1. 新建插件文件plugins/category_list_tag.rb, 内容如下:</h5>

<pre><code>module Jekyll  
  class CategoryListTag &lt; Liquid::Tag  
    def render(context)  
      html = ""  
      categories = context.registers[:site].categories.keys  
      categories.sort.each do |category|  
        posts_in_category = context.registers[:site].categories[category].size  
        category_dir = context.registers[:site].config['category_dir']  
        category_url = File.join(category_dir, category.gsub(/_|\P{Word}/, '-').gsub(/-{2,}/, '-').downcase)  
        html &lt;&lt; "&lt;li class='category'&gt;&lt;a href='http://weizhenwei.github.io/#{category_url}/'&gt;#{category} (#{posts_in_category})&lt;/a&gt;&lt;/li&gt;\n"  
      end  
      html  
    end  
  end  
end  

Liquid::Template.register_tag('category_list', Jekyll::CategoryListTag)  
</code></pre>

<h5>2. 新建source/_includes/asides/category_list.html文件，内容如下：</h5>

<pre><code>&lt;section&gt;  
  &lt;h1&gt;Categories&lt;/h1&gt;  
  &lt;ul id="categories"&gt;  
    { % category_list % }  
  &lt;/ul&gt;  
&lt;/section&gt;  
</code></pre>

<h5>3. 修改_config.yml文件，在default_asides项中添加asides/category_list.html, 值之间以逗号隔开:</h5>

<pre><code>default_asides:[asides/category_list.html, asides/recent_posts.html, ...]  
</code></pre>

<h5>4. rake generate; rake preview; rake deploy;</h5>

<hr />

<h5>参考资料：</h5>

<p><a href="http://www.cnblogs.com/oec2003/archive/2013/05/31/3109577.html">http://www.cnblogs.com/oec2003/archive/2013/05/31/3109577.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress Setup and Deploy on Github]]></title>
    <link href="http://weizhenwei.github.io/blog/2014/12/01/octopress-setup-and-deploy-on-github/"/>
    <updated>2014-12-01T22:49:57+08:00</updated>
    <id>http://weizhenwei.github.io/blog/2014/12/01/octopress-setup-and-deploy-on-github</id>
    <content type="html"><![CDATA[<p>经过充分调研，选定Octopress作为技术博客系统框架。
下面是在Linux mint 13操作系统上安装Octopress和在Github上部署的过程。</p>

<h2>安装</h2>

<h3>1.安装git, ruby和nodejs</h3>

<pre><code>apt-get install git
apt-get install libruby1.9.1
apt-get install ruby1.9.1
apt-get install ruby1.9.1-dev
apt-get install nodejs
</code></pre>

<h3>2.下载Octopress</h3>

<pre><code>git clone git://github.com/imathis/octopress.git octopress
cd octopress
</code></pre>

<h3>3.安装依赖</h3>

<pre><code>gem install bundler
rbenv rehash
bundle install
</code></pre>

<h3>4.安装默认Octopress主题</h3>

<pre><code>rake install
</code></pre>

<h2>在Github上部署Octopress</h2>

<h3>1.在Github个人帐号上创建仓库</h3>

<p>我的Github个人帐号为weizhenwei，创建仓库weizhenwei.github.io.git</p>

<h3>2.部署Octopress到Github</h3>

<pre><code>1.rake setup_github_pages    #关联仓库weizhenwei.github.io.git的完整路径；
2.rake generate              #内容生成；
3.rake preview               #内容预览，在本地浏览器localhost:4000预览；
4.rake deploy                #内容部署，上传到github仓库上的master分支；
</code></pre>

<h3>3.Octopress源代码保存</h3>

<pre><code>git add .
git commit -m "my comment"
git push origin source       # 源代码保存到source分支；
</code></pre>

<h3>4.Octopress配置</h3>

<p>主要是修改_config.yml文件。</p>

<h2>博客内容撰写：</h2>

<pre><code>rake new_post["title“]       # 创建博客文件，该文件在sorce/_post目录下；
然后编辑这个博客文件；
rake generate;
rake preview;
rake deploy;
git add .
git commit -m "my comment"
git push origin source
</code></pre>

<h2>添加新页面：</h2>

<pre><code>1. rake new_page["aboutme"], 该命令自动生成source/aboutme目录以及其下的index.markdown文件;  
2. 编辑source/aboutme/index.markdown文件, 添加内容;  
3. 修改souce/_includes/custom/navigation.html文件，将1.中新建文件路径添加到该文件中。
4. rake generate; rake preview; rake deploy;  
5. git add .; git commit -m "comment"; git push origin source;  
</code></pre>

<h2>注意事项：</h2>

<pre><code>1.在新的地方git clone代码之后，需要checkout到source分支，
  然后再运行rake setup_github_pages命令连接上仓库url。
2. master分支是内容分支，全部是由rake deploy命令提交；
   source分支是源代码分支，用git命令进行提交；
   两个分支不可搞混。
</code></pre>

<hr />

<h2>参考文献：</h2>

<p><a href="http://octopress.org/docs/setup/">http://octopress.org/docs/setup/</a><br/>
<a href="http://octopress.org/docs/deploying/github/">http://octopress.org/docs/deploying/github/</a><br/>
<a href="http://octopress.org/docs/blogging/">http://octopress.org/docs/blogging/</a><br/>
<a href="http://stackoverflow.com/questions/21356212/failed-to-deploy-to-github-pages-using-octopress">http://stackoverflow.com/questions/21356212/failed-to-deploy-to-github-pages-using-octopress</a></p>
]]></content>
  </entry>
  
</feed>
