<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: X86-64 | Weizhenwei's Technical Blog]]></title>
  <link href="http://weizhenwei.github.io/blog/categories/x86-64/atom.xml" rel="self"/>
  <link href="http://weizhenwei.github.io/"/>
  <updated>2014-12-28T23:36:51+08:00</updated>
  <id>http://weizhenwei.github.io/</id>
  <author>
    <name><![CDATA[Weizhenwei]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[x86-64指令和ABI]]></title>
    <link href="http://weizhenwei.github.io/blog/2014/12/25/x86-64zhi-ling-he-abi/"/>
    <updated>2014-12-25T21:51:09+08:00</updated>
    <id>http://weizhenwei.github.io/blog/2014/12/25/x86-64zhi-ling-he-abi</id>
    <content type="html"><![CDATA[<p>&emsp;&emsp;本文是针对x86-64指令和ABI的综述，其内容翻译自参考文献[1]。</p>

<h3>1 引言</h3>

<p>x86-64指令一般有两个操作数：源操作数和目的操作数，目的操作数也作为结果存放地。<br/>
linux下的x86-64指令格式采用AT&amp;T格式，也即源操作数在左边，目的操作数在右边。<br/>
绝大多数x86-64指令采用后缀字母标示操作数的大小，例如q表示64为，b表示8位，w表示16位，l表示32位。</p>

<h3>2 寄存器</h3>

<p>x86-64有16个64位通用寄存器，在AT&amp;T格式中使用%做前缀，其定义和在ABI中的角色如下表所示：</p>

<table>
<thead>
<tr>
<th style="text-align:center;"> Register      </th>
<th style="text-align:center;"> Callee Save   </th>
<th style="text-align:left;">                 Description                 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> %rax          </td>
<td style="text-align:center;"> no            </td>
<td style="text-align:left;"> result register, also used in idiv and imul </td>
</tr>
<tr>
<td style="text-align:center;"> %rbx          </td>
<td style="text-align:center;"> yes           </td>
<td style="text-align:left;"> miscellaneous register                      </td>
</tr>
<tr>
<td style="text-align:center;"> %rcx          </td>
<td style="text-align:center;"> no            </td>
<td style="text-align:left;"> fourth argument register                    </td>
</tr>
<tr>
<td style="text-align:center;"> %rdx          </td>
<td style="text-align:center;"> no            </td>
<td style="text-align:left;"> third argument register, also idiv and imul </td>
</tr>
<tr>
<td style="text-align:center;"> %rsp          </td>
<td style="text-align:center;"> no            </td>
<td style="text-align:left;"> stack pointer                               </td>
</tr>
<tr>
<td style="text-align:center;"> %rbp          </td>
<td style="text-align:center;"> yes           </td>
<td style="text-align:left;"> frame pointer                               </td>
</tr>
<tr>
<td style="text-align:center;"> %rsi          </td>
<td style="text-align:center;"> no            </td>
<td style="text-align:left;"> second argument register                    </td>
</tr>
<tr>
<td style="text-align:center;"> %rdi          </td>
<td style="text-align:center;"> no            </td>
<td style="text-align:left;"> first argument register                     </td>
</tr>
<tr>
<td style="text-align:center;"> %r8           </td>
<td style="text-align:center;"> no            </td>
<td style="text-align:left;"> fifth argument register                     </td>
</tr>
<tr>
<td style="text-align:center;"> %r9           </td>
<td style="text-align:center;"> no            </td>
<td style="text-align:left;"> sixth argument register                     </td>
</tr>
<tr>
<td style="text-align:center;"> %r10          </td>
<td style="text-align:center;"> no            </td>
<td style="text-align:left;"> miscellaneous register                      </td>
</tr>
<tr>
<td style="text-align:center;"> %r11          </td>
<td style="text-align:center;"> no            </td>
<td style="text-align:left;"> miscellaneous register                      </td>
</tr>
<tr>
<td style="text-align:center;"> %r12~%15      </td>
<td style="text-align:center;"> yes           </td>
<td style="text-align:left;"> miscellaneous registers                     </td>
</tr>
</tbody>
</table>


<p>寄存器%rbp，%rbx和%r12~%r15是callee-save的，也即由被调用函数保存。</p>

<h3>3 函数调用约定</h3>

<p>Mac OS Ｘ和Ｌinux操作系统的函数调用都遵从System V ABI，<br/>
有三个x86-64指令用来实现函数调用和返回：<br/>
&emsp;&emsp;&ensp;call:返回地址(当前下一条指令地址)压栈，控制权转移到操作数所在的地址；<br/>
&emsp;&emsp;leave:设置栈指针%rsp为为帧%rbp，恢复帧指针%rbp为栈上保存的帧指针，<br/>
&emsp;&emsp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;该指针从函数栈上弹出；<br/>
&emsp;&emsp;&ensp;&ensp;ret:返回值从函数栈弹出，并跳转到该地址；</p>

<h4>3.1 函数参数</h4>

<p>函数调用的前6个参数通过寄存器传递，传递顺序为%rdi,%rsi,%rdx,%rcx,%r8,%r9。超出部分的参数通过函数
栈帧传递。%rax用作第一个函数返回值，%rdx用作第二个函数返回值。</p>

<h4>3.2 函数栈帧</h4>

<p>函数栈帧从高地址往低地址方向增长，System V ABI使用两个寄存器访问函数栈帧：帧指针%rbp和栈指针%rsp。
帧指针%rbp指向当前函数栈帧基址(栈底)，栈指针%rsp指向当前函数栈帧栈顶。<br/>
一般说来，帧指针%rbp用来存取函数栈帧上的数据，例如传递进来的函数参数，或者函数的本地局部变量。
System V ABI要求要求函数栈帧16字节对齐，这要求函数栈帧的大小应该是16的倍数。</p>

<h5>参考文献</h5>

<p><a href="http://www.classes.cs.uchicago.edu/archive/2009/spring/22620-1/docs/handout-03.pdf">http://www.classes.cs.uchicago.edu/archive/2009/spring/22620-1/docs/handout-03.pdf</a></p>
]]></content>
  </entry>
  
</feed>
